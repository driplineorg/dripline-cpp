language: cpp

stages:
- name: build-test
  if: branch = main OR 
    branch = develop OR 
    branch =~ /.*\.(?i:build)$/ OR 
    type = pull_request 
- name: build images
  if: branch = main OR 
    branch = feature/arm64 OR
    branch = develop OR 
    branch =~ /.*\.(?i:build)$/ OR 
    type = pull_request OR 
    branch =~ /^v\d+\.\d+\.\d+(-S*)?$/
#- name: assemble manifest
#  if: branch = main OR 
#    branch = develop OR 
#    branch =~ /.*\.(?i:build)$/ OR 
#    type = pull_request OR 
#    branch =~ /^v\d+\.\d+\.\d+(-S*)?$/
- name: build-docs
  if: branch = main OR 
    branch = develop OR 
    branch =~ /.*\.(?i:build)$/

env:
- DOCKER_CLI_EXPERIMENTAL=enabled BASE_IMAGE_TAG="3.7"

jobs:
  include:
  - stage: build-test
    os: osx
    compiler: clang
    osx_image: xcode11.3
    addons:
      homebrew:
        packages:
        - rabbitmq-c
        - rapidjson
        - yaml-cpp
        update: true
    script:
    - mkdir build
    - cd build
    - cmake ..
    - make
  - stage: build-test
    os: linux
    dist: bionic
    compiler: gcc
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-5
        - libboost-all-dev
        - librabbitmq-dev
        - rapidjson-dev
        - libyaml-cpp-dev
    script:
    - cmake --version
    - export CC=gcc-5 && export CXX=g++-5
    - mkdir build
    - cd build
    - cmake .. -DScarab_BUILD_PYTHON=FALSE
    - make
  - stage: build-test
    os: linux
    dist: bionic
    compiler: clang
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - clang
        - libboost-all-dev
        - librabbitmq-dev
        - rapidjson-dev
        - libyaml-cpp-dev
    script:
    - export CC=clang && export CXX=clang++
    - mkdir build
    - cd build
    - cmake .. -DScarab_BUILD_PYTHON=FALSE
    - make
  ## build images
  - stage: build images
    name: all archs
    os: linux
    dist: focal
    sudo: required
    addons:
      apt:
        sources:
        - sourceline: "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        packages:
        - qemu-user-static
        - docker-ce
        - docker-ce-cli
        - containerd.io
#        - jq
#        - tree
#    before_install: ".travis/setup_emulation.sh"
    before_install:
    - echo '{experimental":"enabled"}' | sudo tee /etc/docker/daemon.json
    - mkdir -p $HOME/.docker
    - echo '{"experimental":"enabled"}' | sudo tee $HOME/.docker/config.json
    - sudo service docker start
    install:
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --name xbuilder
    - docker buildx ls
    - docker buildx use xbuilder
    - docker buildx ls
    - docker buildx inspect --bootstrap
    script:
#    - set -e
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker buildx build --push --progress plain --platform=linux/amd64 --tag driplineorg/dripline-cpp:buildx-test .
#    - ".travis/bootstrap_image.sh -u amd64 -r python -t ${BASE_IMAGE_TAG} -a amd64 -i driplineorg/dripline-cpp:`echo
#      ${TRAVIS_BRANCH} | tr / _`"
#  - stage: build images
#    name: arm32v7
#    os: linux
#    dist: bionic
#    addons:
#      apt:
#        packages:
#        - qemu-user-static
#        - jq
#        - tree
#    before_install: ".travis/setup_emulation.sh"
#    script:
#    - set -e
#    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#    - ".travis/bootstrap_image.sh -u arm32v7 -r python -t ${BASE_IMAGE_TAG} -a arm7 -i driplineorg/dripline-cpp:`echo
#      ${TRAVIS_BRANCH} | tr / _`"
#  - stage: build images
#    name: arm64v8
#    os: linux
#    dist: bionic
#    addons:
#      apt:
#        packages:
#        - qemu-user-static
#        - jq
#        - tree
#    before_install: ".travis/setup_emulation.sh"
#    script:
#    - set -e
#    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#    - ".travis/bootstrap_image.sh -u arm64v8 -r python -t ${BASE_IMAGE_TAG} -a arm8 -i driplineorg/dripline-cpp:`echo
#      ${TRAVIS_BRANCH} | tr / _`"  ## build general-use manifest
#  - stage: assemble manifest
#    os: linux
#    dist: bionic
#    script:
#    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#    - ".travis/build_manifest.sh -a arm -a amd64 -n driplineorg/dripline-cpp:`echo
#      ${TRAVIS_BRANCH} | tr / _`"
  ## build docs
  - stage: build-docs
    language: python
    os: linux
    dist: bionic
    git:
      depth: false
    addons:
      apt:
        packages:
        - tree
        - doxygen
        - graphviz
    before_install:
    - openssl aes-256-cbc -K $encrypted_ef08ab9a7293_key -iv $encrypted_ef08ab9a7293_iv
      -in .deploy_key.enc -out .deploy_key -d
    - eval "$(ssh-agent -s)"
    - chmod 600 ./.deploy_key
    - ssh-add ./.deploy_key
    script: .travis/build_docs.sh
