language: cpp

stages:
- name: Test
  if: branch = main OR 
    branch = develop OR 
    branch =~ /.*\.(?i:build)$/ OR 
    type = pull_request 
- name: Images
  if: branch = main OR 
    branch = develop OR 
    branch =~ /^v\d+\.\d+\.\d+(-S*)?$/
- name: Documentation
  if: branch = main OR 
    branch = develop
# Removed these two conditions for build-images on 12/22/20 (NSO):
#    branch =~ /.*\.(?i:build)$/ OR 
#    type = pull_request OR 

env:
- DOCKER_CLI_EXPERIMENTAL=enabled BASE_IMAGE_TAG="3.7"

#TODO: build but don't push the docker images in the test stage

jobs:
  include:
  - stage: Test
    os: osx
    compiler: clang
    osx_image: xcode11.3
    addons:
      homebrew:
        packages:
        - rabbitmq-c
        - rapidjson
        - yaml-cpp
        update: true
    before_install:
    - mkdir build
    install:
    - cd build
    - cmake .. -DDripline_ENABLE_TESTING=TRUE
    - make install
    script: testing/run_tests
  - stage: Test
    os: linux
    dist: bionic
    compiler: gcc
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-5
        - libboost-all-dev
        - librabbitmq-dev
        - rapidjson-dev
        - libyaml-cpp-dev
    before_install:
    - cmake --version
    - export CC=gcc-5 && export CXX=g++-5
    - mkdir build
    install:
    - cd build
    - cmake .. -DScarab_BUILD_PYTHON=FALSE -DDripline_ENABLE_TESTING=TRUE -DCMAKE_CXX_FLAGS=-pthread
    - make install
    script: testing/run_tests
  - stage: Test
    os: linux
    dist: bionic
    compiler: clang
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - clang
        - libboost-all-dev
        - librabbitmq-dev
        - rapidjson-dev
        - libyaml-cpp-dev
    before_install:
    - export CC=clang && export CXX=clang++
    - mkdir build
    install:
    - cd build
    - cmake .. -DScarab_BUILD_PYTHON=FALSE -DDripline_ENABLE_TESTING=TRUE -DCMAKE_CXX_FLAGS=-pthread
    - make
    script: testing/run_tests
  ## build images
  - stage: Images
    name: all archs
    os: linux
    dist: focal
    sudo: required
    addons:
      apt:
        sources:
        - sourceline: "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        packages:
        - qemu-user-static
        - docker-ce
        - docker-ce-cli
        - containerd.io
    before_install:
    - echo '{experimental":"enabled"}' | sudo tee /etc/docker/daemon.json
    - mkdir -p $HOME/.docker
    - echo '{"experimental":"enabled"}' | sudo tee $HOME/.docker/config.json
    - sudo service docker start
    install:
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --name xbuilder --use
    - docker buildx ls
    script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - >
      docker buildx build --push --progress plain 
      --platform=linux/arm/v7,linux/arm64,linux/amd64 
      --build-arg img_repo=python 
      --build-arg img_tag=3.8.7-buster 
      --tag driplineorg/dripline-cpp:${TRAVIS_BRANCH} .
  ## build docs
  - stage: Documentation
    language: python
    os: linux
    dist: bionic
    git:
      depth: false
    addons:
      apt:
        packages:
        - tree
        - doxygen
        - graphviz
    before_install:
    - openssl aes-256-cbc -K $encrypted_ef08ab9a7293_key -iv $encrypted_ef08ab9a7293_iv
      -in .deploy_key.enc -out .deploy_key -d
    - eval "$(ssh-agent -s)"
    - chmod 600 ./.deploy_key
    - ssh-add ./.deploy_key
    script: .travis/build_docs.sh
