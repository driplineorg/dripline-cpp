name: Run Tests

on:
  push:
    branches: [ '*.build' ]
  pull_request:
    branches: '*'

  workflow_dispatch:

jobs:

  test_docker:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: setup_buildx
        uses: docker/setup-buildx-action@v1
      - name: Build
        run: |
          cd /home/runner/work/dripline-cpp/dripline-cpp
          docker build 
            --build-arg img_repo=python 
            --build-arg img_tag=3.8.7-buster 
            --build-arg build_type=Debug 
            --build-arg build_examples=TRUE 
            --build-arg enable_testing=TRUE 
            --tag driplineorg/dripline-cpp:test
            .
          docker run driplineorg/dripline-cpp:test /usr/local/testing/run_tests
#        id: build
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: false
#          build-args: |
#            img_repo=python
#            img_tag=3.8.7-buster
#            build_type=Release
#            build_examples=TRUE
#            enable_testing=TRUE
#          tags: test
#          platforms: linux/amd64
#      - name: Tests
#        run: |
#          docker run driplineorg/dripline-cpp:test /usr/local/testing/run_tests

  test_macos:
    runs-on: macos-10.15
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          brew install \
            boost \
            rabbitmq-c \
            rapidjson \
            yaml-cpp
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake .. -DDripline_ENABLE_TESTING=TRUE
      - name: Build
        run: |
          cd build
          make -j2 install
      - name: Run tests
        run: |
          cd build/testing
          ./run_tests
          
  test_linux_gcc:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
            build-essential \
            cmake \
            libboost-all-dev \
            librabbitmq-dev \
            rapidjson-dev \
            libyaml-cpp-dev
      - name: Configure
        run: |
          export CC=gcc && export CXX=g++
          mkdir build
          cd build
          cmake .. -DScarab_BUILD_PYTHON=FALSE -DDripline_ENABLE_TESTING=TRUE -DCMAKE_CXX_FLAGS=-pthread
      - name: Build
        run: |
          cd build
          make -j2 install
      - name: Run tests
        run: |
          cd build/testing
          ./run_tests

  test_linux_clang:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
            build-essential \
            clang \
            cmake \
            libboost-all-dev \
            librabbitmq-dev \
            rapidjson-dev \
            libyaml-cpp-dev
      - name: Configure
        run: |
          export CC=clang && export CXX=clang++
          mkdir build
          cd build
          cmake .. -DScarab_BUILD_PYTHON=FALSE -DDripline_ENABLE_TESTING=TRUE -DCMAKE_CXX_FLAGS=-pthread
      - name: Build
        run: |
          cd build
          make -j2 install
      - name: Run tests
        run: |
          cd build/testing
          ./run_tests
