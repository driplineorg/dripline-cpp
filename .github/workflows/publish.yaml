name: Publish

on:
  push:
    branches: [ main, develop, feature/ghactions ]
    tags: 'v*.*.*'

  workflow_dispatch:

jobs:

  release:
    if: false
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: setup_buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
      - name: List platforms
        run: echo ${{ steps.setup_buildx.outputs.platforms }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: build_push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: |
            img_repo=python
            img_tag=3.8.7-buster
            build_type=Release
            build_examples=FALSE
            enable_testing=FALSE
          tags: driplineorg/dripline-cpp:gha_test  # todo: how to make this depend on the tag for releases
          platforms: linux/amd64 #,linux/arm7,linux/arm64
      - name: Image digest
        run: >
          echo ${{ steps.build_push.outputs.digest }}

  dev:
    if: false
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: setup_buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
      - name: List platforms
        run: echo ${{ steps.setup_buildx.outputs.platforms }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: build_push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: | 
            img_repo=python
            img_tag=3.8.7-buster
            build_type=Debug
            build_examples=TRUE
            enable_testing=TRUE
          tags: driplineorg/dripline-cpp:gha_test-dev  # todo: how to make this depend on the tag for releases
          platforms: linux/amd64 #,linux/arm7,linux/arm64
      - name: Image digest
        run: >
          echo ${{ steps.build_push.outputs.digest }}

  docs:

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
            tree \
            doxygen \
            python3-sphinx \
            graphviz
      #- name: Key
      #  run: |
      #    openssl aes-256-cbc -K $encrypted_ef08ab9a7293_key -iv $encrypted_ef08ab9a7293_iv -in .deploy_key.enc -out .deploy_key -d
      #    eval "$(ssh-agent -s)"
      #    chmod 600 ./.deploy_key
      #    ssh-add ./.deploy_key
      - name: Output location
        run: |
          export OUTPUT_LOCATION="unknown"
          echo "Github ref: $GITHUB_REF"
          if [[ "$GITHUB_REF" == "refs/heads/develop" ]]; then
              echo "branch is develop"
              export OUTPUT_LOCATION="develop"
          elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              echo "branch is main"
              export OUTPUT_LOCATION="main"
          elif [[ "$GITHUB_REF" == "refs/heads/*" ]]; then
              echo "branch is $GITHUB_REF, ${$GITHUB_REF#'refs/heads/'}"
              export OUTPUT_LOCATION="branches/$(${$GITHUB_REF#'refs/heads/'} | tr / _ | tr - .)"
          elif [[ "$GITHUB_REF" == "refs/tags/*" ]]; then
              echo "branch is tag, ${$GITHUB_REF#'refs/tags/'}"
              export OUTPUT_LOCATION="tags/${$GITHUB_REF#'refs/tags/'}"
          fi
          echo "Output location: $OUTPUT_LOCATION"
      - name: Build docs
        run: |
          echo "Output location: $OUTPUT_LOCATION"
          #echo $(if [[ "$TRAVIS_BRANCH" == "develop" || "$TRAVIS_BRANCH" == "main" ]];
          #           then echo "$TRAVIS_BRANCH"; elif [[ ! -z "$TRAVIS_TAG" ]]; then echo "tags/$TRAVIS_TAG";
          #           else echo "branches/$(echo $TRAVIS_BRANCH | tr / _ | tr - .)"; fi) | tee /tmp/output_location
          cd documentation
          make html
          ls ./build/html
          mv ./build/html /tmp/build.html
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: /tmp/build.html # The folder the action should deploy.
          target-folder: ${{ env.OUTPUT_LOCATION }}
          dry-run: true


          #mv ./build/html /tmp/build.html
          #cd ..
          #git checkout gh-pages
          #git clean -d -f -x
          #rm -rf SimpleAmqpClient
          #rm -rf scarab
          #ls
          #mkdir -p ./$(cat /tmp/output_location)
          #rsync -av --delete /tmp/build.html/ ./$(cat /tmp/output_location)
          #tree -L 3
          #git add $(cat /tmp/output_location)
          #git status
          #git diff --cached --quiet; export HAVE_STAGED_FILES=$?
          #echo $HAVE_STAGED_FILES
          ##if [[ "$HAVE_STAGED_FILES" != "0" ]]; then
          ##    git commit -m "built docs for ${GITHUB_REF}"
          ##    git remote -v
          ##    git remote set-url origin "git@github.com:${GITHUB_REPOSITORY}"
          ##    git remote -v
          ##    git push
          ##else
          ##    echo "No documentation updates to push"
          ##fi
